import os
import hashlib
import json

# === CONFIGURATION ===
SCAN_FOLDER = "./scan_target"
HASH_DB_FILE = "malware_hashes.json"

# === Load known malware hashes ===
def load_malware_hashes(file_path):
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
            return set(h.lower() for h in data.get("malware_hashes", []))
    except Exception as e:
        print(f"Failed to load malware hash database: {e}")
        return set()

# === Compute file hash (SHA-256) ===
def compute_file_hash(file_path):
    try:
        sha256 = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                sha256.update(chunk)
        return sha256.hexdigest()
    except Exception as e:
        print(f"Error hashing {file_path}: {e}")
        return None

# === Scan folder for malicious files ===
def scan_folder(folder_path, known_hashes):
    print(f"\nScanning folder: {folder_path}\n")
    flagged_files = []

    for root, _, files in os.walk(folder_path):
        for file in files:
            full_path = os.path.join(root, file)
            file_hash = compute_file_hash(full_path)
            if file_hash:
                if file_hash.lower() in known_hashes:
                    print(f"[ALERT] Malicious file found: {full_path}")
                    flagged_files.append((full_path, file_hash))
                else:
                    print(f"[SAFE] {file}")
    
    return flagged_files

# === Main ===
if __name__ == "__main__":
    malware_hashes = load_malware_hashes(HASH_DB_FILE)
    flagged = scan_folder(SCAN_FOLDER, malware_hashes)

    print("\nScan complete.")
    if flagged:
        print("\nFlagged malicious files:")
        for path, h in flagged:
            print(f"- {path} (SHA-256: {h})")
    else:
        print("No malicious files detected.")
